{"version":3,"sources":["../../../../assets/scripts/assets/scripts/Player.js"],"names":["cc","Class","extends","Component","properties","jumpHeight","jumpDuration","maxMoveSpeed","accel","jumpAudio","default","type","AudioClip","squashDuration","playerPos","onLoad","jumpAction","setJumpAction","node","runAction","accLeft","accRight","xSpeed","systemEvent","on","SystemEvent","EventType","KEY_DOWN","onKeyDown","KEY_UP","onKeyUp","jumpUp","moveBy","v2","easing","easeCubicActionOut","jumpDown","easeCubicActionIn","callback","callFunc","playJumpSound","squash","scaleTo","stretch","squashBack","repeatForever","sequence","event","keyCode","macro","KEY","a","left","d","right","audioEngine","playEffect","onDestroy","off","update","dt","windowWidth","winSize","width","Math","abs","x"],"mappings":"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","file":"Player.js","sourceRoot":"../../../../assets/scripts","sourcesContent":["// Learn cc.Class:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html\n// Learn Attribute:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        // 主角跳跃高度\n        jumpHeight: 0,\n        // 主角跳跃持续时间\n        jumpDuration: 0,\n        // 最大移动速度\n        maxMoveSpeed: 0,\n        // 加速度\n        accel: 0,\n        jumpAudio: {\n            default: null,\n            type: cc.AudioClip\n        },\n        // 辅助形变动作时间\n        squashDuration: 0,\n        playerPos: 0\n    },\n\n\n    onLoad () {\n        // 初始化跳跃动作\n        this.jumpAction = this.setJumpAction();\n        this.node.runAction(this.jumpAction);\n\n        // 加速度方向开关\n        this.accLeft = false;\n        this.accRight = false;\n        // 主角当前水平方向速度\n        this.xSpeed = 0;\n\n        // 初始化键盘输入监听\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_UP, this.onKeyUp, this);\n    },\n\n    setJumpAction: function () {\n        // 跳跃上升\n        let jumpUp = cc.moveBy(this.jumpDuration, cc.v2(0, this.jumpHeight)).easing(cc.easeCubicActionOut());\n        // 下落\n        let jumpDown = cc.moveBy(this.jumpDuration, cc.v2(0, -this.jumpHeight)).easing(cc.easeCubicActionIn());\n        // 添加一个回调函数，用于在动作结束时调用我们定义的其他方法\n        let callback = cc.callFunc(this.playJumpSound, this);\n        //加入形变,更细腻的动画表现\n\n        //压瘪\n\n        let squash=cc.scaleTo(this.squashDuration,1,0.6);\n\n        //拉升\n\n        let stretch=cc.scaleTo(this.squashDuration,1,1.2);\n\n        //恢复正常\n\n        // 不断重复，而且每次完成落地动作后调用回调来播放声音\n        let squashBack=cc.scaleTo(this.squashDuration,1,1);\n\n        return cc.repeatForever(cc.sequence(squash,stretch,jumpUp,squashBack,jumpDown,callback));\n\n    },\n\n    onKeyDown (event) {\n        // set a flag when key pressed\n        switch(event.keyCode) {\n            case cc.macro.KEY.a:\n            case cc.macro.KEY.left:\n                this.accLeft = true;\n                break;\n            case cc.macro.KEY.d:\n            case cc.macro.KEY.right:\n                this.accRight = true;\n                break;\n        }\n    },\n    onKeyUp (event) {\n        // unset a flag when key released\n        switch(event.keyCode) {\n            case cc.macro.KEY.a:\n            case cc.macro.KEY.left:\n                this.accLeft = false;\n                break;\n            case cc.macro.KEY.d:\n            case cc.macro.KEY.right:\n                this.accRight = false;\n                break;\n        }\n    },\n    playJumpSound: function () {\n        // 调用声音引擎播放声音\n        cc.audioEngine.playEffect(this.jumpAudio, false);\n    },\n    onDestroy () {\n        // 取消键盘输入监听\n        cc.systemEvent.off(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);\n        cc.systemEvent.off(cc.SystemEvent.EventType.KEY_UP, this.onKeyUp, this);\n    },\n\n    update: function (dt) {\n        let windowWidth = cc.winSize.width\n        // 根据当前加速度方向每帧更新速度\n        if (this.accLeft) {\n            this.xSpeed -= this.accel * dt;\n        } else if (this.accRight) {\n            this.xSpeed += this.accel * dt;\n        }\n        // 限制主角的速度不能超过最大值\n        if ( Math.abs(this.xSpeed) > this.maxMoveSpeed ) {\n            // this.xSpeed / Math.abs(this.xSpeed) 运动方向\n            this.xSpeed = this.maxMoveSpeed * this.xSpeed / Math.abs(this.xSpeed);\n        }\n        // 根据当前速度更新主角的位置\n        this.playerPos += this.xSpeed * dt;\n\n        // 区域限制\n        if (Math.abs(this.playerPos) > windowWidth / 2 - this.node.width / 2 && (!this.accLeft || !this.accRight)) {\n            this.node.x = this.playerPos / Math.abs(this.playerPos) * (windowWidth / 2 - this.node.width / 2)\n            this.xSpeed = 0\n        }else {\n            this.node.x = this.playerPos\n        }\n\n    },\n});\n"]}